=begin
#The feedpushr API

#A simple feed aggregator daemon with sugar on top.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'cgi'

module FeedpushrClient
  class PshbApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # pub pshb
    # Publication endpoint for PSHB hubs
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pshb_pub(opts = {})
      pshb_pub_with_http_info(opts)
      nil
    end

    # pub pshb
    # Publication endpoint for PSHB hubs
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def pshb_pub_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PshbApi.pshb_pub ...'
      end
      # resource path
      local_var_path = '/pshb'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.goa.error', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PshbApi#pshb_pub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # sub pshb
    # Callback to validate the (un)subscription to the topic of a Hub
    # @param hub_challenge [String] A hub-generated random string
    # @param hub_mode [String] The literal string \&quot;subscribe\&quot; or \&quot;unsubscribe\&quot;
    # @param hub_topic [String] The topic URL given in the corresponding subscription request
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :hub_lease_seconds The hub-determined number of seconds that the subscription will stay active before expiring
    # @return [nil]
    def pshb_sub(hub_challenge, hub_mode, hub_topic, opts = {})
      pshb_sub_with_http_info(hub_challenge, hub_mode, hub_topic, opts)
      nil
    end

    # sub pshb
    # Callback to validate the (un)subscription to the topic of a Hub
    # @param hub_challenge [String] A hub-generated random string
    # @param hub_mode [String] The literal string \&quot;subscribe\&quot; or \&quot;unsubscribe\&quot;
    # @param hub_topic [String] The topic URL given in the corresponding subscription request
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :hub_lease_seconds The hub-determined number of seconds that the subscription will stay active before expiring
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def pshb_sub_with_http_info(hub_challenge, hub_mode, hub_topic, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PshbApi.pshb_sub ...'
      end
      # verify the required parameter 'hub_challenge' is set
      if @api_client.config.client_side_validation && hub_challenge.nil?
        fail ArgumentError, "Missing the required parameter 'hub_challenge' when calling PshbApi.pshb_sub"
      end
      # verify the required parameter 'hub_mode' is set
      if @api_client.config.client_side_validation && hub_mode.nil?
        fail ArgumentError, "Missing the required parameter 'hub_mode' when calling PshbApi.pshb_sub"
      end
      # verify enum value
      allowable_values = ["subscribe", "unsubscribe"]
      if @api_client.config.client_side_validation && !allowable_values.include?(hub_mode)
        fail ArgumentError, "invalid value for \"hub_mode\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'hub_topic' is set
      if @api_client.config.client_side_validation && hub_topic.nil?
        fail ArgumentError, "Missing the required parameter 'hub_topic' when calling PshbApi.pshb_sub"
      end
      # resource path
      local_var_path = '/pshb'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hub.challenge'] = hub_challenge
      query_params[:'hub.mode'] = hub_mode
      query_params[:'hub.topic'] = hub_topic
      query_params[:'hub.lease_seconds'] = opts[:'hub_lease_seconds'] if !opts[:'hub_lease_seconds'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.goa.error', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PshbApi#pshb_sub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
