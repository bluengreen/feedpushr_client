=begin
#The feedpushr API

#A simple feed aggregator daemon with sugar on top.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'cgi'

module FeedpushrClient
  class OutputApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create output
    # Create a new output
    # @param payload [CreateOutputPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Output]
    def output_create(payload, opts = {})
      data, _status_code, _headers = output_create_with_http_info(payload, opts)
      data
    end

    # create output
    # Create a new output
    # @param payload [CreateOutputPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Output, Integer, Hash)>] Output data, response status code and response headers
    def output_create_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OutputApi.output_create ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling OutputApi.output_create"
      end
      # resource path
      local_var_path = '/outputs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.feedpushr.output.v1+json', 'application/vnd.goa.error'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(payload) 

      # return_type
      return_type = opts[:return_type] || 'Output' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OutputApi#output_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete output
    # Delete an output
    # @param id [Integer] Output ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def output_delete(id, opts = {})
      output_delete_with_http_info(id, opts)
      nil
    end

    # delete output
    # Delete an output
    # @param id [Integer] Output ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def output_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OutputApi.output_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OutputApi.output_delete"
      end
      # resource path
      local_var_path = '/outputs/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.goa.error'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OutputApi#output_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get output
    # Retrieve output with given ID
    # @param id [Integer] Output ID
    # @param [Hash] opts the optional parameters
    # @return [Output]
    def output_get(id, opts = {})
      data, _status_code, _headers = output_get_with_http_info(id, opts)
      data
    end

    # get output
    # Retrieve output with given ID
    # @param id [Integer] Output ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Output, Integer, Hash)>] Output data, response status code and response headers
    def output_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OutputApi.output_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OutputApi.output_get"
      end
      # resource path
      local_var_path = '/outputs/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.feedpushr.output.v1+json', 'application/vnd.goa.error'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Output' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OutputApi#output_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list output
    # Retrieve all outputs definitions
    # @param [Hash] opts the optional parameters
    # @return [Array<Output>]
    def output_list(opts = {})
      data, _status_code, _headers = output_list_with_http_info(opts)
      data
    end

    # list output
    # Retrieve all outputs definitions
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Output>, Integer, Hash)>] Array<Output> data, response status code and response headers
    def output_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OutputApi.output_list ...'
      end
      # resource path
      local_var_path = '/outputs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.feedpushr.output.v1+json; type=collection'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Output>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OutputApi#output_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # specs output
    # Retrieve all output types available
    # @param [Hash] opts the optional parameters
    # @return [Array<OutputSpec>]
    def output_specs(opts = {})
      data, _status_code, _headers = output_specs_with_http_info(opts)
      data
    end

    # specs output
    # Retrieve all output types available
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OutputSpec>, Integer, Hash)>] Array<OutputSpec> data, response status code and response headers
    def output_specs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OutputApi.output_specs ...'
      end
      # resource path
      local_var_path = '/outputs/_specs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.feedpushr.output-spec.v1+json; type=collection'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<OutputSpec>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OutputApi#output_specs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update output
    # Update an output
    # @param id [Integer] Output ID
    # @param payload [UpdateOutputPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Output]
    def output_update(id, payload, opts = {})
      data, _status_code, _headers = output_update_with_http_info(id, payload, opts)
      data
    end

    # update output
    # Update an output
    # @param id [Integer] Output ID
    # @param payload [UpdateOutputPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Output, Integer, Hash)>] Output data, response status code and response headers
    def output_update_with_http_info(id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OutputApi.output_update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OutputApi.output_update"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling OutputApi.output_update"
      end
      # resource path
      local_var_path = '/outputs/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.feedpushr.output.v1+json', 'application/vnd.goa.error'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/xml', 'application/gob', 'application/x-gob'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(payload) 

      # return_type
      return_type = opts[:return_type] || 'Output' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OutputApi#output_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
